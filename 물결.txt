//@version=5
indicator("물결 전략 시스템 (변동성 필터)", overlay=true)

// =====================================================
// 설정 메뉴
// =====================================================
// 표시 설정
showWave = input.bool(true, "물결 표시", group="표시 설정")
showSignals = input.bool(true, "신호 표시", group="표시 설정")
showTable = input.bool(true, "정보 테이블", group="표시 설정")

// 물결 설정
zlLength = input.int(70, "물결 길이", minval=20, maxval=200, group="물결 설정")
zlMult = input.float(1.2, "물결 폭", minval=0.5, maxval=3.0, step=0.1, group="물결 설정")

// 필터 설정
useFilter = input.bool(true, "변동성 필터 사용", group="필터 설정")
minMovePercent = input.float(0.5, "최소 움직임 %", minval=0.1, maxval=5.0, step=0.1, group="필터 설정")
lookbackBars = input.int(5, "확인 봉 수", minval=1, maxval=20, group="필터 설정")

// 색상 설정
longColor = input.color(#00ffbb, "상승 색상", group="색상 설정")
shortColor = input.color(#ff1100, "하락 색상", group="색상 설정")
waveOpacity = input.int(70, "물결 투명도", minval=0, maxval=100, group="색상 설정")

// =====================================================
// Zero Lag 계산
// =====================================================
src = close
lag = math.floor((zlLength - 1) / 2)
zlema = ta.ema(src + (src - src[lag]), zlLength)
volatility = ta.highest(ta.atr(zlLength), zlLength*3) * zlMult

// =====================================================
// 트렌드 판단
// =====================================================
var int trend = 0

// 물결 전환 조건
if ta.crossover(close, zlema + volatility)
    trend := 1
if ta.crossunder(close, zlema - volatility)
    trend := -1

// 기본 신호
rawLongSignal = ta.crossover(trend, 0)
rawShortSignal = ta.crossunder(trend, 0)

// =====================================================
// 변동성 필터
// =====================================================
// 최근 N봉 동안의 전체 움직임 계산
highestHigh = ta.highest(high, lookbackBars)
lowestLow = ta.lowest(low, lookbackBars)
totalMovePercent = (highestHigh - lowestLow) / lowestLow * 100

// 필터 적용
validMove = not useFilter or totalMovePercent >= minMovePercent

// 최종 신호
longSignal = rawLongSignal and validMove
shortSignal = rawShortSignal and validMove

// 디버그용 - 필터된 신호 표시
filteredLong = rawLongSignal and not validMove
filteredShort = rawShortSignal and not validMove

// =====================================================
// 물결 시각화
// =====================================================
// 물결 색상
waveColor = trend == 1 ? color.new(longColor, waveOpacity) : trend == -1 ? color.new(shortColor, waveOpacity) : color.new(color.gray, 90)

// 중심선
m = plot(showWave ? zlema : na, "물결 중심", linewidth=2, color=waveColor)

// 상단 밴드 (하락 추세일 때만)
upper = plot(showWave and trend == -1 ? zlema + volatility : na, 
             style=plot.style_linebr, 
             color=color.new(shortColor, 90))

// 하단 밴드 (상승 추세일 때만)
lower = plot(showWave and trend == 1 ? zlema - volatility : na, 
             style=plot.style_linebr, 
             color=color.new(longColor, 90))

// 물결 채우기
fill(m, upper, showWave ? (open + close) / 2 : na, showWave ? zlema + volatility : na, 
     color.new(shortColor, 90), color.new(shortColor, waveOpacity))
fill(m, lower, showWave ? (open + close) / 2 : na, showWave ? zlema - volatility : na, 
     color.new(longColor, 90), color.new(longColor, waveOpacity))

// =====================================================
// 신호 표시
// =====================================================
// 유효한 신호 (화살표)
plotshape(showSignals and longSignal ? zlema - volatility : na, 
          "롱 진입", shape.labelup, location.absolute, 
          longColor, text="▲", textcolor=chart.fg_color, 
          size=size.tiny)
          
plotshape(showSignals and shortSignal ? zlema + volatility : na, 
          "숏 진입", shape.labeldown, location.absolute, 
          shortColor, text="▼", textcolor=chart.fg_color, 
          size=size.tiny)

// 필터된 신호 (작은 X 표시)
plotshape(showSignals and filteredLong ? zlema - volatility : na, 
          "필터된 롱", shape.xcross, location.absolute, 
          color=color.new(color.gray, 70), size=size.tiny)
          
plotshape(showSignals and filteredShort ? zlema + volatility : na, 
          "필터된 숏", shape.xcross, location.absolute, 
          color=color.new(color.gray, 70), size=size.tiny)

// =====================================================
// 포지션 상태 추적
// =====================================================
var bool inPosition = false
var bool isLong = false
var float entryPrice = 0.0
var float profitPercent = 0.0
var int signalCount = 0
var int filteredCount = 0

if longSignal or shortSignal
    signalCount += 1
    
if filteredLong or filteredShort
    filteredCount += 1

if longSignal
    inPosition := true
    isLong := true
    entryPrice := close
    
if shortSignal
    inPosition := true
    isLong := false
    entryPrice := close

// 수익률 계산
if inPosition
    if isLong
        profitPercent := (close - entryPrice) / entryPrice * 100
    else
        profitPercent := (entryPrice - close) / entryPrice * 100

// =====================================================
// 정보 테이블
// =====================================================
if showTable and barstate.islast
    var table infoTable = table.new(position.top_right, 2, 7, 
                                   bgcolor=color.new(#1a1a1a, 20),
                                   border_width=1,
                                   border_color=color.gray)
    
    // 헤더
    table.cell(infoTable, 0, 0, "물결 전략", 
              text_color=color.white, 
              bgcolor=color.new(color.blue, 30))
    table.cell(infoTable, 1, 0, "필터 " + (useFilter ? "ON" : "OFF"), 
              text_color=color.white, 
              bgcolor=color.new(color.blue, 30))
    
    // 현재 추세
    table.cell(infoTable, 0, 1, "현재 추세", text_color=color.gray)
    table.cell(infoTable, 1, 1, 
              trend == 1 ? "상승" : trend == -1 ? "하락" : "중립", 
              text_color=trend == 1 ? longColor : trend == -1 ? shortColor : color.gray)
    
    // 포지션 상태
    table.cell(infoTable, 0, 2, "포지션", text_color=color.gray)
    position_text = inPosition ? (isLong ? "LONG" : "SHORT") : "대기"
    table.cell(infoTable, 1, 2, position_text, 
              text_color=inPosition ? (isLong ? longColor : shortColor) : color.gray)
    
    // 진입가
    table.cell(infoTable, 0, 3, "진입가", text_color=color.gray)
    entry_text = inPosition ? str.tostring(entryPrice, format.mintick) : "-"
    table.cell(infoTable, 1, 3, entry_text, text_color=color.white)
    
    // 현재 수익률
    table.cell(infoTable, 0, 4, "수익률", text_color=color.gray)
    profit_text = inPosition ? str.tostring(profitPercent, "##.##") + "%" : "-"
    profit_color = profitPercent > 0 ? color.green : profitPercent < 0 ? color.red : color.gray
    table.cell(infoTable, 1, 4, profit_text, text_color=profit_color)
    
    // 최근 움직임
    table.cell(infoTable, 0, 5, "최근 변동", text_color=color.gray)
    move_text = str.tostring(totalMovePercent, "#.##") + "%"
    move_color = totalMovePercent >= minMovePercent ? color.white : color.gray
    table.cell(infoTable, 1, 5, move_text, text_color=move_color)
    
    // 필터 통계
    table.cell(infoTable, 0, 6, "신호/필터", text_color=color.gray)
    stats_text = str.tostring(signalCount) + "/" + str.tostring(filteredCount)
    table.cell(infoTable, 1, 6, stats_text, text_color=color.yellow)

// =====================================================
// 알림 설정
// =====================================================
alertcondition(longSignal, "물결 롱 진입", '{"action":"buy","symbol":"{{ticker}}"}')
alertcondition(shortSignal, "물결 숏 진입", '{"action":"sell","symbol":"{{ticker}}"}')