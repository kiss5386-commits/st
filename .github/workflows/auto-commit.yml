      - name: Create GPT patcher (script)
        shell: bash
        run: |
          cat > "$RUNNER_TEMP/gpt_patcher.py" <<'PY'
          import os, re, subprocess, sys, pathlib
          from openai import OpenAI

          SAFE_PATHS = ["app", "server", "configs", "stargate_all_in_one.py"]
          DENY_PATHS = [".github", "secrets", "keys", "certs"]

          TEMPLATE = """
          너는 시드 보호가 최우선인 시니어 파이썬 엔지니어다.
          아래 '지시문'을 만족하도록 레포의 코드를 수정하는 **유니파이드 패치(git apply 형식)**만 생성하라.
          규칙:
          - SAFE_PATHS 안에서만 수정하고, DENY_PATHS에는 절대 손대지 말 것.
          - 기존 리스크 관리 로직(손절/트레일링/쿨다운)의 기본값/흐름은 유지.
          - 파일 수정 시에는 **수정된 전체 파일 내용**을 포함한 패치를 생성.
          - 애매하면 TODO 주석을 남기고 과한 추측은 금지.
          - 출력에는 패치 내용만 포함(코드펜스/설명/텍스트 금지).

          SAFE_PATHS={safe}
          DENY_PATHS={deny}

          지시문:
          {inst}
          """

          def run(cmd):
            return subprocess.check_output(cmd, text=True).strip()

          def ensure_clean():
            status = run(["git","status","--porcelain"])
            if status:
              print("Worktree not clean", file=sys.stderr); sys.exit(1)

          # --- 패치 정리 (코드펜스/앞뒤 잡소리 제거, 줄바꿈 표준화) ---
          def sanitize_patch(patch: str) -> str:
            s = patch.replace("\r\n","\n").replace("\r","\n")
            # 코드펜스 제거
            s = re.sub(r"^```(?:diff)?\n", "", s, flags=re.M)
            s = s.replace("```", "")
            # 첫 'diff --git' 이전 텍스트 제거
            m = re.search(r"^diff --git a/.*", s, flags=re.M)
            if m:
              s = s[m.start():]
            # 뒤쪽에 딱히 필요없는 문구 제거(마지막 diff 이후 꼬리)
            # (여기서는 간단히 트림만)
            s = s.strip() + "\n"
            return s
          # -------------------------------------------------------

          # ---- 폴더 자동 생성: 패치에 등장하는 경로의 부모 폴더 생성 ----
          def _paths_from_patch(patch: str):
            paths = []
            for line in patch.splitlines():
              if line.startswith("+++ b/") or line.startswith("--- a/"):
                p = line.split("\t")[0].split(" ", 1)[-1][2:]  # b/path or a/path
                if p != "/dev/null":
                  paths.append(p)
            return paths

          def ensure_dirs_for_patch(patch: str):
            for p in _paths_from_patch(patch):
              d = os.path.dirname(p)
              if d and not os.path.exists(d):
                os.makedirs(d, exist_ok=True)
          # --------------------------------------------------------

          def main():
            ensure_clean()
            instructions = os.environ.get("USER_INSTRUCTIONS","").strip()
            if not instructions:
              print("No instructions provided", file=sys.stderr); sys.exit(2)

            prompt = TEMPLATE.format(
              safe=",".join(SAFE_PATHS),
              deny=",".join(DENY_PATHS),
              inst=instructions
            )

            client = OpenAI(api_key=os.environ["OPENAI_API_KEY"])
            resp = client.chat.completions.create(
              model="gpt-4o-mini",
              messages=[
                {"role":"system","content":"Return ONLY a valid git unified diff. No code fences, no prose."},
                {"role":"user","content":prompt}
              ],
              temperature=0.1,
            )
            raw = resp.choices[0].message.content or ""
            patch = sanitize_patch(raw)

            # 최소 검증: diff 헤더 확인
            if not re.search(r"^diff --git a/", patch, flags=re.M):
              print("No unified diff header found after sanitize.", file=sys.stderr)
              print(patch[:800])
              sys.exit(3)

            # 금지 경로 터치 여부 검사
            for line in patch.splitlines():
              if line.startswith(("+++ b/","--- a/")):
                path = line.split("\t")[0].split(" ",1)[-1][2:]
                if any(f"/{d.strip('/')}/" in f"/{path}" for d in DENY_PATHS):
                  print(f"Patch touches denied path: {path}", file=sys.stderr)
                  sys.exit(4)

            # 패치 저장 + 디렉토리 생성 + 드라이런 (whitespace fix)
            pathlib.Path(".gpt_patch.diff").write_text(patch, encoding="utf-8")
            ensure_dirs_for_patch(patch)
            subprocess.check_call(["git","apply","--check","--whitespace=fix",".gpt_patch.diff"])
            print("DRY-RUN OK")

            # 실제 적용
            subprocess.check_call(["git","apply","--whitespace=fix",".gpt_patch.diff"])
            print("PATCH APPLIED")

          if __name__ == "__main__":
            main()
          PY
