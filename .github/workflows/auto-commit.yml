name: GPT Auto Code Modification

on:
  push:
    branches: [main]
    paths:
      - "st/**"
      - "**/*.py"
  workflow_dispatch:
  repository_dispatch:
    types: [run_modify_bot]permissions:
  contents: write
  pull-requests: write

jobs:
  auto-modify:
    runs-on: ubuntu-latest
    env:
      OPENAI_MODEL: gpt-5-mini   # 紐⑤뜽 怨좎젙(湲곕낯)
      MAX_FILES: "1"             # GPT 寃쎈줈?먯꽌 泥⑤? ?뚯씪 ???쒗븳
      TOKEN_BUDGET: "12000"      # GPT 寃쎈줈 ?낅젰 ?좏겙 ?곹븳
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install "openai>=1.0.0,<2" "PyYAML>=6.0,<7"

      - name: Configure Git
        run: |
          git config --global user.name "GPT Auto Modifier"
          git config --global user.email "gpt-auto@noreply.github.com"

      - name: Backup current state
        run: |
          git add -A
          git stash push -m "Backup before GPT modification - $(date)" || true
          echo "?뵏 ?꾩옱 ?곹깭 諛깆뾽 ?꾨즺"

      - name: Python syntax check
        run: python -m py_compile gpt_patcher.py

      - name: Execute GPT Patcher
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          USER_INSTRUCTIONS: ${{ github.event.inputs.instructions }}
          # ?낅젰媛믪씠 鍮꾩뼱?덉쑝硫?job env 湲곕낯媛??ъ슜
          OPENAI_MODEL: ${{ github.event.inputs.model || env.OPENAI_MODEL }}
          MAX_FILES: ${{ github.event.inputs.max_files || env.MAX_FILES }}
          GITHUB_RUN_ID: ${{ github.run_id }}
        run: |
          echo "?? GPT ?⑥쿂 ?ㅽ뻾 ?쒖옉"
          echo "?뱷 吏?쒕Ц(??120??:"
          printf '%s' "$USER_INSTRUCTIONS" | head -c 120 | sed 's/`/쨈/g'
          echo
          echo "?쨼 紐⑤뜽: $OPENAI_MODEL"
          echo "?뱛 理쒕? ?뚯씪: $MAX_FILES"

          python3 gpt_patcher.py

      - name: Check for changes
        id: changes
        run: |
          if git diff --quiet && git diff --cached --quiet; then
            echo "蹂寃쎌궗??씠 ?놁뒿?덈떎"
            echo "has_changes=false" >> "$GITHUB_OUTPUT"
          else
            echo "蹂寃쎌궗??씠 諛쒓껄?섏뿀?듬땲??
            echo "has_changes=true" >> "$GITHUB_OUTPUT"
            echo "?뱥 蹂寃쎈맂 ?뚯씪:"
            git diff --name-status || true
            git diff --cached --name-status || true
          fi

      - name: Commit & Push
        if: ${{ success() && (github.event.inputs.dry_run == '' || github.event.inputs.dry_run != 'true') }}
        shell: bash
        run: |
          set -euo pipefail
          git config user.name  "st-bot"
          git config user.email "st-bot@users.noreply.github.com"

          git add -A

          # 蹂寃??놁쑝硫??ㅽ궢
          if git diff --cached --quiet; then
            echo "No changes to commit."
            exit 0
          fi

          # ?낅젰 JSON?먯꽌 plan ?대쫫留??덉쟾?섍쾶 異붿텧 (jq ?놁쑝硫?鍮덇컪)
          PLAN_NAME=$(printf '%s' "${{ github.event.inputs.instructions }}" | jq -r '.plan // empty' 2>/dev/null || true)
          [ -z "$PLAN_NAME" ] && PLAN_NAME="apply plan"

          git commit -m "gpt-patcher: ${PLAN_NAME}" \
                     -m "Run ID: ${{ github.run_id }}" \
                     -m "Model: ${{ github.event.inputs.model || env.OPENAI_MODEL }}"

          git push

      - name: Create Pull Request
        if: steps.changes.outputs.has_changes == 'true'
        uses: peter-evans/create-pull-request@v6
        id: create_pr
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: gpt/auto-${{ github.run_id }}
          # 吏?쒕Ц ?몄텧/?몄젥??諛⑹?瑜??꾪빐 ?덉쟾???쒕ぉ ?ъ슜
          title: "gpt-patcher: ${{ github.run_id }}"

          body: |
            ## ?쨼 GPT ?먮룞 肄붾뱶 ?섏젙

            **?숋툘 ?ㅼ젙:**
            - **紐⑤뜽:** ${{ github.event.inputs.model || env.OPENAI_MODEL }}
            - **理쒕? ?뚯씪:** ${{ github.event.inputs.max_files || env.MAX_FILES }}
            - **Run ID:** ${{ github.run_id }}

            **?뱥 蹂寃쎌궗??**
            ??PR?먮뒗 GPT ?⑥쿂媛 ?먮룞?쇰줈 ?앹꽦/?섏젙???뚯씪?ㅼ씠 ?ы븿?섏뼱 ?덉뒿?덈떎.
          commit-message: "gpt-patcher: auto"
          delete-branch: true
          assignees: ${{ github.actor }}
          reviewers: ${{ github.actor }}

      - name: Auto-merge PR (?좏깮??
        if: steps.changes.outputs.has_changes == 'true' && contains(github.event.inputs.instructions, '[AUTO_MERGE]')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PR_NUMBER=$(gh pr list --head "gpt/auto-${{ github.run_id }}" --json number --jq '.[0].number' 2>/dev/null || echo "")
          if [ -n "$PR_NUMBER" ] && [ "$PR_NUMBER" != "null" ]; then
            echo "?봽 PR #$PR_NUMBER ?먮룞 癒몄? ?쒕룄"
            sleep 5
            gh pr merge "$PR_NUMBER" --squash --auto || {
              echo "?좑툘 ?먮룞 癒몄? ?ㅽ뙣 - ?섎룞 ?뺤씤 ?꾩슂"
              gh pr comment "$PR_NUMBER" --body "?좑툘 ?먮룞 癒몄????ㅽ뙣?덉뒿?덈떎. 肄붾뱶 由щ럭 ???섎룞?쇰줈 癒몄??댁＜?몄슂."
            }
            echo "???먮룞 癒몄? 泥섎━ ?꾨즺"
          else
            echo "??PR??李얠쓣 ???놁뒿?덈떎"
          fi

      - name: Cleanup on failure
        if: failure()
        run: |
          echo "?뮙 ?묒뾽 ?ㅽ뙣 - ?뺣━ ?묒뾽 ?쒖옉"
          git stash pop 2>/dev/null || echo "蹂듭썝??諛깆뾽???놁뒿?덈떎"
          git branch -D "gpt/auto-${{ github.run_id }}" 2>/dev/null || true
          echo "?㏏ ?뺣━ ?묒뾽 ?꾨즺"

      - name: Summary
        if: always()
        run: |
          echo "?뱤 GPT ?먮룞 ?섏젙 ?붿빟"
          echo "===================="
          echo "?뱷 吏?쒕Ц(??120??:"
          printf '%s' "${{ github.event.inputs.instructions }}" | head -c 120 | sed 's/`/쨈/g'
          echo
          echo "?쨼 紐⑤뜽: ${{ github.event.inputs.model || env.OPENAI_MODEL }}"
          echo "?뱛 理쒕? ?뚯씪: ${{ github.event.inputs.max_files || env.MAX_FILES }}"
          echo "?봽 Run ID: ${{ github.run_id }}"
          if [ "${{ steps.changes.outputs.has_changes }}" = "true" ]; then
            echo "???곹깭: 蹂寃쎌궗???덉쓬 - PR ?앹꽦??
          else
            echo "?뱄툘 ?곹깭: 蹂寃쎌궗???놁쓬"
          fi
          echo "===================="

