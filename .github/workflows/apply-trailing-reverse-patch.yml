name: apply-trailing-reverse-patch
on:
  push:
    branches: [main]
    paths:
      - "st/**"
      - "**/*.py"
  workflow_dispatch:
  repository_dispatch:
    types: [apply_trailing_reverse_patch]
permissions:
  contents: write
  pull-requests: write

jobs:
  patch:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Apply trailing-reverse patch (in-function)
        run: |
          python - <<'PY'
          import re, pathlib, textwrap

          p = pathlib.Path("stargate_all_in_one.py")
          s = p.read_text(encoding="utf-8")

          changed = False

          # 0) ?ы띁 蹂닿컯: _as_bool / trailing_enabled_from_cfg ?놁쑝硫?二쇱엯
          if "def trailing_enabled_from_cfg(" not in s:
            inject = textwrap.dedent("""
            # === GPT PATCH HELPER: BEGIN ===
            def _as_bool(v, default=True):
                if v is None: return default
                if isinstance(v, bool): return v
                return str(v).strip().lower() in ("1","true","yes","y","on")

            def trailing_enabled_from_cfg(cfg):
                try:
                    if isinstance(cfg, dict):
                        if "enable_trailing" in cfg:
                            return _as_bool(cfg.get("enable_trailing"), True)
                        if "trailing_enabled" in cfg:
                            return _as_bool(cfg.get("trailing_enabled"), True)
                        t = cfg.get("trailing") or {}
                        if isinstance(t, dict) and "enabled" in t:
                            return _as_bool(t.get("enabled"), True)
                    return True
                except Exception:
                    return True
            # === GPT PATCH HELPER: END ===
            """).strip()+"\n\n"
            # import ?꾨옒???쎌엯
            m = re.search(r"(?s)^(from .*?\\n|import .*?\\n)+", s)
            pos = m.end() if m else 0
            s = s[:pos] + inject + s[pos:]
            changed = True

          # 1) 留??꾨옒 fallback ?쇱씤 ?쒓굅 (?덉쑝硫?
          new_s, n = re.subn(
            r"\\n#\\s*GPT PATCH: fallback definition\\s*\\nreverse_on_opposite\\s*=\\s*\\(not\\s*trailing_enabled_from_cfg\\(globals\\(\\)\\.get\\('cfg',\\s*\\{\\}\\)\\)\\)\\s*\\n\\s*$",
            "\n",
            s
          )
          if n > 0:
            s = new_s
            changed = True

          # 2) 湲곗〈 reverse_on_opposite ??낆? 紐⑤몢 ?쒖??앹쑝濡?援먯껜
          new_s, n = re.subn(
            r"(?m)^(\s*)reverse_on_opposite\s*=\s*.*$",
            r"\1reverse_on_opposite = (not trailing_enabled_from_cfg(locals().get('cfg', locals().get('settings', {}))))  # GPT PATCH",
            s
          )
          if n > 0:
            s = new_s
            changed = True

          # 3) /webhook(?먮뒗 ?좎궗) ?⑥닔 ?대????놁쑝硫?二쇱엯
          #    ?곗꽑?쒖쐞: @app.route('/webhook'...) -> def .*webhook.* -> def .*process.*signal.*
          patterns = [
            r"(?s)(@app\.route\(\s*['\"]/webhook['\"].*?\)\s*def\s+\w+\s*\(.*?\):\s*\n)",
            r"(?s)(def\s+\w*webhook\w*\s*\(.*?\):\s*\n)",
            r"(?s)(def\s+\w*process\w*signal\w*\s*\(.*?\):\s*\n)",
          ]

          def ensure_inside_function(src):
            for pat in patterns:
              m = re.search(pat, src)
              if m:
                indent = "    "
                insert_at = m.end()
                insert_line = indent + "reverse_on_opposite = (not trailing_enabled_from_cfg(locals().get('cfg', locals().get('settings', {}))))  # GPT PATCH: trailing OFF => reverse\n"
                # ?대? 媛숈? 以꾩씠 ?⑥닔 ?덉뿉 ?덉쑝硫?以묐났 ?쎌엯 湲덉?
                body_end = src.find("\ndef ", insert_at)
                seg = src[insert_at: body_end if body_end!=-1 else None]
                if "reverse_on_opposite = (not trailing_enabled_from_cfg" not in seg:
                  return src[:insert_at] + insert_line + src[insert_at:], True
                return src, False
            return src, False

          s, inj = ensure_inside_function(s)
          if inj:
            changed = True

          if changed:
            p.write_text(s, encoding="utf-8")
            print("PATCH APPLIED")
          else:
            print("No changes needed.")
          PY

      - name: Create PR
        uses: peter-evans/create-pull-request@v6
        with:
          branch: patch/trailing-reverse-in-function
          commit-message: "server: set reverse_on_opposite inside webhook; remove fallback"
          title: "patch: ?꾪솚 議곌굔???뱁썒 ?⑥닔 ?대????ㅼ젙 + fallback ?쒓굅"
          body: |
            - reverse_on_opposite瑜?/webhook(?먮뒗 ?좏샇 泥섎━) ?⑥닔 **?대?**?먯꽌 ?ㅼ젙?섎룄濡?二쇱엯
            - 留??꾨옒 fallback ?꾩뿭 ?쇱씤 ?쒓굅
            - ?쒖??? `reverse_on_opposite = (not trailing_enabled_from_cfg(locals().get('cfg', locals().get('settings', {}))))`

permissions:
  contents: write
  actions: write

concurrency:
  group: apply-trailing-reverse-patch
  cancel-in-progress: false
